export EDITOR=emacs
if [ "$EDITOR" = "emacs" ]; then
    EDITOR_CMD="e"
else
    EDITOR_CMD="$EDITOR"
fi

## 保管を有効化
## fpath=(~/dotfiles/zsh-completions $fpath)
autoload -Uz compinit
compinit -c

HISTFILE=$HOME/.zsh-history
HISTSIZE=100000
SAVEHIST=100000
## cd無しでディレクトリ移動
## setopt auto_cd
## 補完候補を詰めて表示
setopt list_packed
## cd -[tab]で移動の履歴を表示
setopt auto_pushd
## 同じディレクトリを pushd しない
setopt pushd_ignore_dups
## 色を使う
setopt prompt_subst
## カッコの対応などを自動的に補完
setopt auto_param_keys
setopt hist_ignore_dups
setopt auto_param_slash
setopt mark_dirs
## 補完候補を一覧表示
setopt auto_list
## 補完候補一覧でファイルの種別をマーク表示
setopt list_types
bindkey "^R" history-incremental-search-backward
bindkey "^S" history-incremental-search-forward
setopt hist_no_store
setopt hist_save_no_dups
setopt hist_reduce_blanks
## 補完候補のカーソル選択を有効に
zstyle ':completion:*:default' menu select=1

# [ -r ~/.ssh/known_hosts ] && _ssh_hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[\|]*}%%\ *}%%,*}) || _ssh_hosts=()
# [ -r ~/.ssh/config ] && _ssh_config=($(cat ~/.ssh/config | sed -ne 's/Host[=\t ]//p')) || _ssh_config=()
# [ -r /etc/hosts ] && : ${(A)_etc_hosts:=${(s: :)${(ps:\t:)${${(f)~~"$(</etc/hosts)"}%%\#*}##[:blank:]#[^[:blank:]]#}}} || _etc_hosts=()
# hosts=(
#     "$_ssh_config[@]"
#     "$_ssh_hosts[@]"
#     "$_etc_hosts[@]"
#     "$HOST"
#     localhost
# )
# zstyle ':completion:*:hosts' hosts $hosts

#日本語ファイルの表示
setopt print_eight_bit

autoload -Uz colors
colors
setopt share_history
#setopt correct

## zsh のキーバインドを環境変数 EDITOR に関わらず emacs 風にする
bindkey -e

#スクリーンロックを無効化
stty stop undef

## サスペンド無効化
stty susp undef

#cd 後のlsの省略
function chpwd() { ls }

#
# Goolge Search by Google Chrome
# terminalからググったりqiita検索をできる
#
google() {
    local str opt
    if [ $# != 0 ]; then
        for i in $*; do
            # $strが空じゃない場合、検索ワードを+記号でつなぐ(and検索)
            str="$str${str:++}$i"
        done
        opt='search?num=100'
        opt="${opt}&q=${str}"
    fi
    open -a Google\ Chrome http://www.google.co.jp/$opt
}

## C-^ で一つ上のディレクトリへ
function cdup() {
    echo
    cd ..
    echo
    zle reset-prompt
}
zle -N cdup
bindkey '^^' cdup

# rbenvのパスを通す
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

## ------------------------------
## Look And Feel Settings
## ------------------------------
#### Ls Color ###
## 色の設定
export LSCOLORS=Exfxcxdxbxegedabagacad
## 補完時の色の設定
export LS_COLORS='di=01;34:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
## ZLS_COLORSとは？
export ZLS_COLORS=$LS_COLORS
## lsコマンド時、自動で色がつく(ls -Gのようなもの？)
export CLICOLOR=true
## 補完候補に色を付ける
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

## #### Prompt ###
## ## プロンプトに色を付ける
## autoload -U colors; colors

## ## 一般ユーザ時
## tmp_prompt="%F{cyan}[%n@%m${WINDOW:+"[$WINDOW]"}]%f-%{${fg[green]}%}[%~]%{${reset_color}%}-%F{magenta}[%D{%m/%d %T}]%f
## %#"
## #tmp_prompt="%{${fg[cyan]}%}%n%# %{${reset_color}%}"
## tmp_prompt2="%{${fg[cyan]}%}%_> %{${reset_color}%}"
## tmp_rprompt="%{${fg[green]}%}[%~]%{${reset_color}%}"
## tmp_sprompt="%{${fg[yellow]}%}%r is correct? [Yes, No, Abort, Edit]:%{${reset_color}%}"

## ## rootユーザ時(太字にし、アンダーバーをつける)
## if [ ${UID} -eq 0 ]; then
##     tmp_prompt="%B%U${tmp_prompt}%u%b"
##     tmp_prompt2="%B%U${tmp_prompt2}%u%b"
##     tmp_rprompt="%B%U${tmp_rprompt}%u%b"
##     tmp_sprompt="%B%U${tmp_sprompt}%u%b"
## fi

## #gitのブランチの表示
## autoload -Uz vcs_info
## zstyle ':vcs_info:*' formats '(%s)-[%b]'
## zstyle ':vcs_info:*' actionformats '(%s)-[%b|%a]'
## RPROMPT="%1(v|%F{green}%1v%f|)"


## PROMPT=$tmp_prompt    # 通常のプロンプト
## PROMPT2=$tmp_prompt2  # セカンダリのプロンプト(コマンドが2行以上の時に表示される)
## #RPROMPT=$tmp_rprompt  # 右側のプロンプト
## SPROMPT=$tmp_sprompt  # スペル訂正用プロンプト

# ------------------------------
## Other Settings
# ------------------------------

### Aliases ###
alias history='history -E'
alias ll='ls -l'
alias la='ls -a'
alias s='screen'
alias emacs-kill='emacsclient -e "(kill-emacs)"'
alias zshrc='$EDITOR_CMD ~/.zshrc'
alias t='tail -f'
alias g='git'
alias db_rollback='rake db:rollback'
alias db_migrate='rake db:migrate'
alias tail_log='tail -f *.log'
alias ssh-aa='eval `ssh-agent -s` ; ssh-add'

#colordiff設定
if [[ -x `which colordiff` ]]; then
    alias diff='colordiff -u'
else
    alias diff='diff -u'
fi

#lessの色設定、改行ありなし等
export LESS='-SRnq'


case "$TERM" in
    kterm*|xterm*)
        precmd() {
            printf "\e]0;${USER}@${HOST%%.*}:${PWD}\a"
            psvar=()
        }
        ;;
    screen*|ansi*)
        preexec() {
            printf "\eP\e]0;${USER}@${HOST%%.*}:${PWD}\a\e\\"
            #printf "\eP\e]0;!${1%% *}\a\e\\"
            printf "\ek#${1%% *}\e\\"
        }
        precmd() {
            printf "\eP\e]0;${USER}@${HOST%%.*}:${PWD}\a\e\\"
            #printf "\eP\e]0;~$(basename $(pwd))\a\e\\"
            printf "\ek$(basename $(pwd))\e\\"
            psvar=()
        }
        ;;
esac
setopt transient_rprompt


## emacsclient をシームレスに使うための関数
## http://k-ui.jp/?p=243
function e(){
    echo "[$0] emacsclient -c -t $*";
    (emacsclient -c -t $* ||
            (echo "[$0] emacs --daemon"; emacs --daemon &&
                 (echo "[$0] emacsclient -c -t $*"; emacsclient -c -t $*)) ||
            (echo "[$0] emacs $*"; emacs $*))
}

## Screenのセッション保存場所変更
## http://rcmdnk.github.io/blog/2014/05/04/computer-screen-socket/
## export SCREENDIR=$HOME/.screens
## if [ ! -d $SCREENDIR ];then
##     mkdir -p $SCREENDIR
## fi
## chmod 700 $SCREENDIR
